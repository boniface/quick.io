Next Version (refactor + performance):
	* close_reason -> string mapping; allow apps to register their own close reasons + verify them.
	* memory consistency: http://developer.android.com/training/articles/smp.html#c_dont
	* Rfc6455 -> qio.close() in client, does QEV let the close frame through?
	* http://manpages.ubuntu.com/manpages/lucid/man1/perf-stat.1.html
	* http://www.reddit.com/tb/1rvuh0
	* balance-tlb or balance-alb for network: http://en.wikipedia.org/wiki/Link_aggregation#Driver_modes
	* stomp + radioDNS
	* clean up tests
	* TODO: bench_events_query -> optimize that ptrie?
	* memory usage for subscriptions
		- resizable lists
		- heuristic to determine if allowed to subscribe
	* http://engineering.linkedin.com/performance/optimizing-linux-memory-management-low-latency-high-throughput-databases

Clients:
	* implement SSL for all of them
	* allow registering apps with clients such that there's a ihr-listening app on client and server side that talk back and forth and provide a nice interface to programs
		- So the ihr-nowplaying app would have: ihr-nowplaying/{server,c,js,java}
		- And it would be inited like: qio = new QuickIo([servers]); qio.addApp(IhrNowPlaying); IhrNowPlaying.metadata(1477, function() {})
client-c:
	* implement long messages: https://github.com/iheartradio/quick.io-client-c/blob/master/quickio.c#L562
	* can never happen? https://github.com/iheartradio/quick.io-client-c/blob/master/quickio.c#L494

Documentation:
	* What quickio-testapp is
	* Where to include #include <qio_app_test.h> for app testing (#define APP_TESTING for config, so before #include <qio_app.h>)
