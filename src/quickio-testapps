#!/usr/bin/env python

__author__ = 'Andrew Stone <andrew@clovar.com>'
__copyright__ = '2012-2014 Clear Channel Inc.'
__license__ = 'MIT'

import argparse
import glob
import os
import resource
import subprocess
import sys

INI_FILE = '/tmp/quickio-testapps.%d.ini' % os.getpid()
INI = '''[quick-event]
max-clients = %d
threads = 2
[quick.io]
bind-address = 0.0.0.0
bind-port = 55439
public-address = localhost
run-app-tests = true
[quick.io-apps]
app = %s
'''

_apps = []
_qio_path = 'quickio'
max_clients = resource.getrlimit(resource.RLIMIT_NOFILE)[0]

parser = argparse.ArgumentParser(description='run each app\'s test suite')
parser.add_argument('-a', '--app', nargs='*', type=file,
	help='which app to run the tests on')
parser.add_argument('-p', '--quickio-path', type=file,
	help='absolute path to the quickio binary, if not found on the path')
args = parser.parse_args()

if args.quickio_path:
	_qio_path = args.quickio_path.name

if args.app:
	for app in args.app:
		_apps.append(app.name)
else:
	_apps = glob.glob('test_*.so')

if not _apps:
	print >> sys.stderr, 'No apps found to test. We\'re done here.'
	sys.exit(0)

for app in _apps:
	with open(INI_FILE, 'w') as f:
		f.write(INI % (max_clients, os.path.abspath(app)))

	status = "Running app tests on: %s" % app
	print
	print '*' * (len(status) + 4)
	print '  %s' % status
	print '*' * (len(status) + 4)
	print

	exit_code = 0
	try:
		sp = subprocess.Popen([_qio_path, '--config-file=%s' % INI_FILE])
		sp.wait()
		if sp.returncode != 0:
			raise Exception('Test failed on "%s" (exit status %d)' % (app, ret))
	except OSError as e:
		print >> sys.stderr, 'Error executing quickio binary: %s' % e
		exit_code = 1
	except:
		print >> sys.stderr, 'Error: %s' % sys.exc_info()[1]
		exit_code = 2
	finally:
		os.remove(INI_FILE)
		sp.wait()
		if exit_code != 0:
			sys.exit(exit_code)
