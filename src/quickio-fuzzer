#!/usr/bin/env python
#
# Run QuickIO so that the fuzzer can hit it.

__author__ = 'Andrew Stone <andrew@clovar.com>'
__copyright__ = '2012-2014 Clear Channel Inc.'
__license__ = 'MIT'


import argparse
import exceptions
import os
import multiprocessing
import resource
import subprocess
import sys

INI_FILE = '/tmp/quickio-fuzzer.%d.ini' % os.getpid()
INI = '''[quick-event]
max-clients = %d
threads = %d
[quick.io]
bind-address = 0.0.0.0
bind-port = 55455
bind-path = /tmp/quickio.sock
public-address = localhost
[quick.io-apps]
quick-fuzz = quick-fuzz
'''

if "/usr/bin" in os.path.abspath(__file__):
	qio_path = "quickio"
else:
	qio_path = "./quickio"

cmd = [qio_path, '--config-file=%s' % INI_FILE]

parser = argparse.ArgumentParser(description='run the server for fuzzing or profiling')
parser.add_argument('-p', '--profile', action='store_true',
	help='run inside of valgrind\'s callgrind')
args = parser.parse_args()

if args.profile:
	cmd = ['valgrind', '--tool=callgrind'] + cmd

with open(INI_FILE, 'w') as f:
	f.write(INI % (
		resource.getrlimit(resource.RLIMIT_NOFILE)[0],
		multiprocessing.cpu_count(),
	))

exit_code = 0
try:
	sp = subprocess.Popen(cmd)
	sp.wait()
	if sp.returncode != 0:
		raise Exception('QuickIO exited with status %d' % ret)
except exceptions.KeyboardInterrupt:
	pass
except OSError as e:
	print >> sys.stderr, 'Error executing quickio: %s' % e
	exit_code = 1
except:
	print >> sys.stderr, 'Error: %s' % sys.exc_info()[1]
	exit_code = 2
finally:
	os.remove(INI_FILE)
	sp.wait()
	sys.exit(exit_code)
