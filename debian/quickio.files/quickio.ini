[quick.io]
# The address the main server should listen on
# Use 0.0.0.0 to listen everywhere.
# Leave blank to listen on no plain text port.
#
# type - string
bind-address = 0.0.0.0

# The SSL adress to listen on.
# Use 0.0.0.0 to listen everywhere.
# Leave blank not to use SSL.
#
# type - string
bind-address-ssl =

# The port that the server processes will start listening on.
#
# type - int
bind-port = 80
bind-port-ssl = 443

# The hostname for the QIO node. This should be resolvable on the network. If not provided,
# will use the machine's hostname; if that fails, it falls back to bind-address.
#
# It's typically safe to leave this blank and use default behavior.
#
# type - string
hostname =

# The location of the log file.  This file MUST be owned by `user`.
# If no location is given, then all messages go to stderr.
#
# This log can be rotated by sending the server SIGUSR1
#
# type - string
log-file = /var/log/quickio.log

# The maximum number of clients allowed to be connected
#
# type - uint64
max-clients = 4194304

# The maximum length of a message from a client
# This number should be a power of 2 for maximum efficiency.
#
# type - uint64
max-message-len = 1024

# The maximum number of subscriptions a single client may have
#
# type - uint64
max-subs = 128

# The location of the SSL Private key
#
# type - string
ssl-private-key =

# The location to the certificate chain (in PEM)
#
# type - string
ssl-cert-chain =

# The graphite server's address
#
# type - string
stats-graphite-address =

# The graphite server's TCP port for text lines
#
# type - int
stats-graphite-port = 2003

# The prefix for all stats sent from this server to graphite.
# The trailing dot is not necessary.
#
# Graphite keys are constructed as (for example): qio.HOSTNAME.clients, where HOSTNAME is
# the hostname of the system.  Run `hostname` to see what it will be.
#
# type - string
stats-graphite-prefix = qio

# Enable flash support policy file support on port 843.
# If this fails, only a warning is emitted. The server will still run.
#
# type - int
support-flash = true

# The number of threads to run to service clients
#
# type - uint64
threads = 8

# The time a misbehaving client has to finish a request before he is killed
#
# Note: this is not exact: a few hundred milliseconds might elapse before the
# client is actually closed.  This is just a MINIMUM value.
#
# Max value: 127
#
# type - int
timeout = 5

# The user the server should be run as
#
# type - string
user = quickio

[quick.io-apps]
# Entries in this section follow in the following pattern:
#   appName = /path/to/library
#   appName:prefix = /some/prefix (optional)
#
# Path: the path may be as simple as "appName" is the appName.so is in the apps directory
# of the distribution.  If it is not, an absolute path is required.  Keep in mind that ".so"
# is not required.
#
# Keep in mind that the app name here directly references the settings section for the
# specified application.  For example, if the app is named "appName", then there should
# be a configuration section [appName] specifying all the config options for the app.
# As such, the application names MUST be unique.

# Cluster MAY NOT have a prefix applied to it: it prefixes itself, and it relies on its
# own prefixed events.
#cluster = cluster

#example = /usr/lib/quickio/example
#example:prefix = /example

[cluster]
# Determines if this host should serve as the cluster managerment node
#
# type - bool
is-server = false

# The host name / IP address of where we can find the cluster server
#
# Only used when is-server == false
#
# type - string
cluster-host =

# The port the cluster server is running on
#
# Only used when is-server == false
#
# type - int
cluster-port = 9871

# The public address of this server
#
# Only used when is-server == false
#
# type - string
public-address =

# How long to wait once after a balance before considering doing another balance.
#
# Only used when is-server == true
#
# type - int
balance-cooldown = 120

# How often the cluster should be checked for imbalances and balanced if necessary.
#
# Only used when is-server == true
#
# type - int
balance-interval = 120

#The minimum number of clients that must be connected to the cluster before any
# balancing will occur. This prevents the case, for example, where one node has 10
# clients and another 200. There's not much load at this point, so rebalancing would
# be more an inconvenience than a help.
#
# Only used when is-server == true
#
# type - int
balance-min-clients = 5000

# Measured in percent: once a node is `balance-threshold` percent over the number of
# clients it shoud have in relation to the rest of the clients in the cluster, it will
# be balanced.  For example: say there are 2,000 clients in total connected to the
# cluster, and there are two nodes running, one holding 800 clients, the other holding
# 1200 clients.  If this is set to "20" (read: 20%), a rebalance will be
# triggered at this point as the second node has 20% more clients than it should have.
#
# This should be in the form of percent: 100 = 100%, 50 = 50%.
# That means that ".5" IS INVALID.
#
# Only used when is-server == true
#
# type - int
balance-threshold = 20
